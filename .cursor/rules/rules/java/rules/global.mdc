---
description: 
globs: 
alwaysApply: true
---

---
description: 
globs: 
alwaysApply: true
---
# 项目通用规范

- 每次更新或者创建了serice,manager,mapper的任何方法，按照以下格式同步到 [func.md](mdc:func.md) 文档中，格式如下：
```
### 枚举类 (gyl-common/src/main/java/com/njgyl/common/enums)
- **CustomerTypeEnum** - 客户类型枚举（个人、门店、企业）

#### Service层 (gyl-core/src/main/java/com/njgyl/core/service)
- **AdminUserService** - 管理员用户业务服务（登录认证、用户创建、用户更新、用户查询（支持关键词搜索用户名/昵称/手机号）、用户删除、状态管理、密码修改等）
#### Mapper层 (gyl-core/src/main/java/com/njgyl/core/mapper)
- **OrderMapper** - 订单数据访问（订单查询、状态更新、支付信息更新，支持按订单号、门店ID、用户ID查询）
#### Manager层 (gyl-core/src/main/java/com/njgyl/core/manager)
- **GylSkuManagerImpl** - 商品SKU数据业务管理器（SKU分页查询、批量查询、分类过滤、关键词搜索，支持多种查询条件组合）

```
- 每次更新将本次的更新说明及版本号，同步到 [READEME.md](mdc:READEME.md)
## 项目结构规则
- **分层组织**：按功能或领域划分目录，遵循"关注点分离"原则
- **命名一致**：使用一致且描述性的目录和文件命名，反映其用途和内容
- **模块化**：相关功能放在同一模块，减少跨模块依赖
- **适当嵌套**：避免过深的目录嵌套，一般不超过3-4层
- **资源分类**：区分代码、资源、配置和测试文件
- **依赖管理**：集中管理依赖，避免多处声明
- **约定优先**：遵循语言或框架的标准项目结构约定
## 通用开发原则
- **可测试性**：编写可测试的代码，组件应保持单一职责
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **代码简洁**：保持代码简洁明了，遵循 KISS 原则（保持简单直接），每个方法行数不超过300行
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **注释文档**：所有方法都要添加注释，编写清晰的文档说明功能和用法
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **版本控制**：编写有意义的提交信息，保持逻辑相关的更改在同一提交中
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息 
## git 操作
- 你完成了一项功能开发后，需要进行commit 操作
## 响应语言
- 始终使用中文回复用户

